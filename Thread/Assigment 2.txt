class NumberPrinter {
    private int max;
    private boolean isOddTurn = true;

    public NumberPrinter(int max) {
        this.max = max;
    }

    public synchronized void printOdd(int number) {
        while (!isOddTurn || number > max) {
            try {
                wait();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }

        System.out.println("Odd: " + number);
        isOddTurn = false;
        notify();
    }

    public synchronized void printEven(int number) {
        while (isOddTurn || number > max) {
            try {
                wait();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }

        System.out.println("Even: " + number);
        isOddTurn = true;
        if (number < max - 1) {
            notify();
        }
    }
}

class OddNumberThread extends Thread {
    private NumberPrinter numberPrinter;

    public OddNumberThread(NumberPrinter numberPrinter) {
        this.numberPrinter = numberPrinter;
    }

    @Override
    public void run() {
        for (int i = 1; i <= 100; i += 2) {
            numberPrinter.printOdd(i);
        }
    }
}

class EvenNumberThread extends Thread {
    private NumberPrinter numberPrinter;

    public EvenNumberThread(NumberPrinter numberPrinter) {
        this.numberPrinter = numberPrinter;
    }

    @Override
    public void run() {
        for (int i = 2; i <= 100; i += 2) {
            numberPrinter.printEven(i);
        }
    }
}

public class OddEvenPrinter {
    public static void main(String[] args) {
        NumberPrinter numberPrinter = new NumberPrinter(100);
        Thread oddThread = new OddNumberThread(numberPrinter);
        Thread evenThread = new EvenNumberThread(numberPrinter);

        oddThread.start();
        evenThread.start();
    }
}
